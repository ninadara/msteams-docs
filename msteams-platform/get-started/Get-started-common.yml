### YamlMime:YamlDocument
documentType: Tutorial
title: Getting start by setting up your environment
metadata:
  title: Getting start by setting up your environment
  description: Get started building great apps in Microsoft Teams
  audience: Developer
  level: Intermediate
  displayType: one-column
  ms.date: 06/01/2018
  ms.service: msteams
  ms.topic: tutorial

items:
- durationInMinutes: 1
  content: |
    
    This tutorial is designed to walk you through what is required to register a bot in the bot framework. These steps are the same regardless of whether you will develop in C# or Node.js and hosting choice agnostic. 

 
    This guide is for developers looking to get started with developing bots for Microsoft Teams. It will help you understand: 
    - How to prepare your Office 365 tenant for development
    - What prerequistes are required for the path of development you choose. 
    - Registering with the bot framework. 
    - How to create your first manifest in Teams App Studio
    - References to external documentation that will help you understand partner services

    The guide is designed to get you started quickly. It will not be a one size fits all, but it should be a good starting point. 

- title: Prepare your Office 365 tenant
  durationInMinutes: 2
  content: |

    Microsoft teams is available for a various set of plans across Small\Medium Business, Enterprise and Education. To get a complete list, see [Office 365 licensing for Microsoft Teams](https://docs.microsoft.com/MicrosoftTeams/office-365-licensing). 

    If you don't currently have an Office 365 account or sideloading is not enabled in your tenant, you can sign up for the [Office 365 Developer program](https://dev.office.com/devprogram) to get a *free* one-year Office 365 Developer Tenant. This account can only be used for testing purposes.  For more information on setting up your test accounts, see [Add users individually or in bulk to Office 365](https://support.office.com/article/Add-users-individually-or-in-bulk-to-Office-365-Admin-Help-1970f7d6-03b5-442f-b385-5880b9c256ec).

    To check if sideloading is enabled, in Microsoft Teams open the Store and look for the "Upload a custom app" option. 

    ![Screenshot of the "Upload a custom app" option in Store](~/assets/images/get-started/Upload-custom-app-UI.png)

    ## Turn on Microsoft Teams for your organization

    Teams is enabled by default in the versions of Office 365 that support it, however your Office 365 administrator might have disabled it. To learn how to enable teams with an Office Administrator account, see [Manage user access to Microsoft Teams](https://docs.microsoft.com/MicrosoftTeams/user-access). 

    ## Enable sideloading

    To learn about the available admin settings for Apps and Bots and to learn how to enable sideloading, see [Admin settings for apps in Microsoft Teams](https://docs.microsoft.com/MicrosoftTeams/admin-settings#enable-new-external-apps-by-default). 

  title: Prerequistes to start development
  durationInMinutes: 3
  content: |

    To complete this tutorial, you need to get the following tools:

    ## For C#\.NET

    * [Install Git](https://git-scm.com/downloads)
    * [Install Visual Studio 2017](https://www.visualstudio.com/downloads/). You can install the free community edition.

    If you see an option to add `git` to the PATH during installation, choose to do so. It will be handy.

    Verify your `git` installation by running the following in a terminal window:
    > [!NOTE]
    > Use the terminal window that you are most comfortable with on your platform. These examples use Bash, but will run on most platforms.

    ```bash
    $ git --version
    git version 2.15.0.windows.1

    ```

    Make sure to launch Visual Studio 2017 and install any updates if shown.

    You can continue to use this terminal window to run the commands that follow in this tutorial.

    ## For Node.js

    * [Install Git](https://git-scm.com/downloads)
    * [Install Node.js and NPM](https://nodejs.org/)
    * Get any text editor. You can install and use [Visual Studio Code](https://code.visualstudio.com/download) for free.

    If you see options to add `git`, `node`, `npm`, and `code` to the PATH during installation, choose to do so. It will be handy.

    Verify your installation by running the following in a terminal window:
    > [!NOTE]
    > Use the terminal window that you are most comfortable with on your platform. These examples use Bash, but will run on most platforms.

    ```bash
    $ git --version
    git version 2.15.0.windows.1

    $ node -v
    v6.11.4

    $ npm -v
    5.5.1

    $ gulp -v
    CLI version 1.4.0
    Local version 3.9.1
    ```

    You may have a different version of these applications. This should not be a problem.
    If you don't have gulp installed, do so now by running `npm install gulp -g` in your terminal window.

    If you have installed Visual Studio Code, you can verify the installation by running:

    ```bash
    code --version
    1.18.1
    929bacba01ef658b873545e26034d1a8067445e9
    ```

    You can continue to use this terminal window to run the commands that follow in this tutorial.

  title: Registering with the bot framework
  durationInMinutes: 3
  content: |

    TODO: Speak about how this is only required if they want to leverage a Bot as apart of their application. Our sample solution has a bot configured, so if you intend to use that as a starting point, it'll be beneficial to register (and pontentially) generate the AppId in the folllowing step. Please record the output of the BotID and App Password for use in later tutorials. 

    Currently you will still need to register your Bot in Bot Framework: https://dev.botframework.com/bots/new, being sure to add Microsoft Teams as a channel and that you re-use any Microsoft App ID you generated if you've already created your app package/manifest. If you leverage the Teams client to chat with a Bot, that Bot must be registered in Bot framework to be found for both sideloaded and published bots. Testing a bot with the Bot Framework emulator does not require registration, to learn more see [Debug bots with the Bot Framework Emulator](https://docs.microsoft.com/en-us/azure/bot-service/bot-service-debug-emulator?view=azure-bot-service-3.0).

    > [!TIP]
    > We will soon allow this registration flow to happen directly from App Studio. 

    > [!NOTE]
    > You **must** use this link to create a new bot: https://dev.botframework.com/bots/new. If you click on the *Create a bot* button in the Bot Framework portal instead, you will [create your bot in Microsoft Azure](#bots-and-microsoft-azure) instead.

    ![Bot Framework registration page](~/assets/images/bots/bfregister.png)

    > [!NOTE]
    > ## Bots and Microsoft Azure
    > As of December, 2017, the Bot Framework portal is optimized for registering bots in Microsoft Azure. Here are some things to know:
    > * While it's possible to create a new Bot Framework bot without using Azure, you must use that URL (https://dev.botframework.com/bots/new), which is no longer exposed in the Bot Framework portal.
    > * When you edit the properties of an existing bot in the [list of your bots in Bot Framework](https://dev.botframework.com/bots) such as its "messaging endpoint," which is common when first developing a bot, especially if you use [ngrok](https://ngrok.com), you will see "Migration status" column and a blue "Migrate" button that will take you into the Microsoft Azure portal. Don't click on the "Migrate" button unless that's what you want to do; instead, click on the name of the bot and you can edit its properties:</br>
      ![Edit Bot Properties](~/assets/images/bots/bf-migrate-bot-to-azure.png)
    > * If you register your bot using Microsoft Azure, it does not need to be *hosted* on Microsoft Azure.
    > * If you do register a bot using Microsoft Azure portal, you must have a Microsoft Azure account. You can [create one for free](https://azure.microsoft.com/en-us/free/). To verify your identity when you create one, you must provide a credit card, but it won't be charged; it's always free to create and use bots with Microsoft Teams.
    > * In the near future, you'll be able to register/update app and bot information directly within Microsoft Teams. Once this is supported, you'll only have to use the Microsoft Azure portal for adding/configuring other Bot Framework channels such as Direct Line, Web Chat, Skype, Facebook Messenger, etc. 

- title: Installing App Studio
  durationInMinutes: 2
  content: |

    Microsoft Teams App Studio makes it easy to start creating or integrating your own service, whether you develop custom apps for your enterprise or SaaS applications for teams around the world. 
    
    Apps for Teams are made up of two parts:

    * The functionality of the app is hosted on a web server
    * The definition of the app is contained in an application package that Teams uses to find and display your app functionality. The app package is what you upload to Teams when you first test your app

    The most significant part of the application package is the app manifest. Teams App Studio streamlines the creation of the manifest for your app, and also provides some useful tools like the Card Editor and a React control library. Writing and hosting the code is still up to you.
    
    This tutorial is designed to walk you through the use of App Studio for manifest creation (*and publish coming soon*). These steps are the same regardless of whether you will develop in C# or Node.js and hosting choice agnostic.

    ![Store icon](~/assets/images/get-started/storeicon.png)

    In the store, search for Teams App Studio.

    ![Store entry for app studio](~/assets/images/get-started/storeteamsappstudio(preview).png)

    Select the Teams App Studio tile to open the app install page:

    ![Configure app studio](~/assets/images/get-started/teamsappstudioconfiguration.png)

    Select *install*.

    ![Teams app studio](~/assets/images/get-started/teamsappstudio(preview).png)

    Once you are in Teams App Studio, click on the *Manifest editor* tab where you can either import an existing app or create a new app.

- title: Working with App Studio
  durationInMinutes: 2
  content: |

    ### Conversation

    This is where you can see what the [cards you create in App Studio](#card-editor) look like in Teams when you test them by sending them to yourself.

    ### Card Editor

    A card is a container for short or related pieces of information. Microsoft Teams supports cards, which can have multiple properties and attachments. Cards are a key way that bots and connectors relay actionable information to users. 

    To make this process easier and less error-prone, the Card Editor tab lets you build Hero Cards or Thumbnail Cards using a form and verify and test the resulting card (exactly as a user would see it) via a bot. It also provides the corresponding JSON, C#, or Node.js code for the card that you can copy/paste into your app's source code.

    If you already have a card that you would like to verify inside Teams, you can paste the JSON for that card into the JSON tab under *Add card info* and send it to yourself to see what it looks like in a chat.

    ### React Control Library

    Creating an app that follows the Teams best practices is a great way to give your app a look and feel that fits seamlessly with the Teams client experience. The UI controls that you use are critical to achieving that end. In order to make it easier to create a consistent UI, App Studio provides several categories of UI controls which follow Teams design principles.

    Examples of the controls and corresponding React components are provided and ready to use in building your app.

    #### Controls

    Controls include:

    * Buttons
    * Dropdowns
    * Checkboxes
    * Radio Buttons
    * Toggles
    * Test Areas
    * Links
    * Tabs
    * Tables
    * Icons

    #### Source

    The control library is open source. It is found on [GitHub](https://github.com/OfficeDev/msteams-ui-components/tree/develop/msteams-ui-components-react).


- title: Working with App Studio's Manifest Editor
  durationInMinutes: 2
  content: |

    As mentioned earlier, the most significant part of a Microsoft Teams app package is its manifest.json file. This file, which must conform to the [Teams App schema](~\resources\schema\manifest-schema.md), contains metadata which allows Teams to correctly present your app to users.

    The Manifest Editor tab in App Studio simplifies creating the manifest, allowing you to describe the app, upload your icons, add app capabilities, and produce a .zip file which can easily be uploaded into Teams for testing or distributed for others to use. Note that App Studio does not produce functional code for your app, or host your app.  Your app must already be hosted and running at the URL listed in the manifest for the app upload process to result in a working app.

    #### Details

    The details section of the Manifest Editor defines the high level description of the app you are making. This includes things such as the app’s name, description, and visual branding. You can automatically generate a GUID for your app and provide URLs for your privacy statement and terms of use.

    #### Capabilities

    The capabilities section of the Manifest Editor is where the app's capabilities are defined and where details of each of those capabilities are listed.

    ##### Tabs

    * **Team Tabs.** A team tab becomes part of a channel and provides a single kind of information to a team. For example, the Planner tab for a channel contains a single plan; the Power BI tab maps to a specific report. Users can drill down to the relevant context, but they should not be able to navigate outside the tab. The Power BI tab, for instance, doesn't enable navigation to other Power BI reports, but it does enable the *Go to website* button that launches the report in the main Power BI website.

      For team tabs, you must provide a *Configuration URL* to present options and gather information so users can customize the content and experience of your tab. This iframed HTML page is displayed when a user first adds the tab to a channel.

      You must also provide any additional domains that the tab expects to load from or link to.

    * **Personal Tabs.** This section lets you define a set of tabs that are presented by default in the one-on-one app experience (i.e. the experience a user has with your app outside the context of a team or channel).  In this section, provide the tab name, a unique identifier, the URL that points to the UI to be displayed in Teams, and optionally, the URL to use if a user opts to view the tab in a browser. As with Teams tabs, provide any additional domains from which the tab expects to load from or link to.

    ##### Bots

    This section allows you to add a bot to your app. Currently, an app can only have one bot. If you already have a bot registered with Bot Framework, you can add that bot by clicking *Set Up* and supplying the bot’s name, Bot Framework ID, and defining the scopes in which the bot will work.

    If you have not yet registered a bot with the Bot Framework, click *Register* to create a new one. Once you’re done registering your bot, come back to this section of the Manifest Editor to enter its name and Bot Framework ID.

    Once you have supplied your bot’s information, you can now optionally define a list of commands that your bot can suggest to users. Add the name of the command, a description of the command which indicates its syntax and arguments, and the scope(s) to which this command should apply.

    Note that if you have defined your bot to only support one scope, commands specified for the unsupported scope will be ignored. You can edit the scopes your bot supports at any time.

    ##### Connectors

    This section allows you to add a connector to your app. If you already have registered an Office 365 connector, choose *Set up* and enter the name and ID of the connector. If you want a new connector click *Register* to be taken to the Connector Developer Dashboard in your browser.

    ##### Messaging Extensions

    [Messaging extensions](~\concepts\messaging-extensions.md) are a powerful new way for users to engage with your app within Microsoft Teams. Users can query for information from your service and post that information in the form of cards, right into the channel or chat conversation.

    Messaging extensions are powered by Bot Framework bots, so they require a configured bot to operate. If you have the name and Bot Framework ID of the bot you would like to power the messaging extension, enter it. Otherwise, click *Register* to create one and enter the information afterward. Select whether the configuration of a messaging extension can be updated by the user.

    Once you have the underlying bot configured, define the commands and parameters which the messaging extension can accept.

    Each command requires a title and an ID. The command can optionally contain a description for the user. Each command can support up to five parameters, each of which requires:

    * The name of the parameter as it appears in the Teams client and is included in the user request
    * A user-friendly title
    * An optional description

    #### Test and Distribute

    Once you have finished defining your application, the Test and Distribute section allows you export your app’s definition as a zip file which then can be shared and uploaded into the Teams client for testing. Clicking export downloads the zip file as *appname.zip* in your default download directory.


- title: Next steps
  durationInMinutes: 1
  content: |
    We covered the following key learnings in this training:
    - How to prepare your Office 365 tenant for development
    - What prerequistes are required for the path of development you choose. 
    - Registering with the bot framework. 
    - How to create your first manifest in Teams App Studio

    ### Next steps

    1.	Get starting:
      - [Get started on the Microsoft Teams platform with Node.js](~/get-started/get-started-nodejs.yml)
      or 
      - [Get started on the Microsoft Teams platform with C#/.NET](~/get-started/get-started-dotnet.yml)
    2.  [Deploying your sample](~/get-started/get-start-Deploy-your-app-to-Microsoft-Teams.yml)
    



