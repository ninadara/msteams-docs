### YamlMime:YamlDocument
documentType: Tutorial
title: Get started on deploying your app to Microsoft Teams
metadata:
  title: Get started on deploying your app to Microsoft Teams
  description: Get started on deploying your app to Microsoft Teams
  audience: Developer
  level: Intermediate
  displayType: one-column
  ms.date: 06/01/2018
  ms.service: msteams
  ms.topic: tutorial

items:
- durationInMinutes: 1
  content: |

    After hosting your app, you need to do a few updates to your app package before it is ready to be deployed to your Microsoft Teams environment.

    > [!NOTE]
    > Before you begin make sure to check out our [Get started](get-started-common.yml) tutorial to get your prerequistes and environment setup. It will also guide you through the registration process of a bot. This tutorial builds upon either [Get started with Node.js]() or [Get started with C#]() based on which SDK you want to leverage. 

    This tutorial helps you get your app package into Microsoft Teams for testing. You will need permissions to be able to sideload apps. This topic is written to be platform independent, but does build on the sample that was leveraged in the previous tutorial. 


- title: The app manifest
  durationInMinutes: 2
  content: |

    The app manifest is a file that tells the Microsoft Teams platform all about your app and the capabilities it provides your users. You will learn more about apps and their capabilities later [here](~/concepts/apps/apps-overview), but for now focus on the modifications to the manifest needed to load the hello-world app in Microsoft Teams.

    You can find the manifest file at `src/manifest.json` within the hello-world sample. Please follow these steps to make the appropriate changes:

    ## Step 1: Change the APP ID in the manifest

    You need a unique **ID** to distinguish your app from others on the Microsoft Teams platform. This **APP ID** is a `GUID` and is set in the app manifest file.

    To get a unique value for your app follow the instructions in [Create a bot for Microsoft Teams](~/concepts/bots/bots-create). You will use the App Framework website to register your app. Use your app URL for the Messaging endpoint, followed by `"/api/messages"`. This should look something like: `https://d0ac14a5.ngrok.io/api/messages`.

    Make a note of the **APP ID** and at least one password generated by the Bot Framework. You will need this information later.

    Now edit the manifest file and set the value of the `"id"` property to the AppID returned by BotFramework.

    [!code-json[Manifest file](~/../_msteams-samples-hello-world-nodejs/src/manifest.json#L1-L12)]

    You will also need to change the botID value in the bots and the composeExtensions sections later in the manifest.

    [!code-json[Manifest file](~/../_msteams-samples-hello-world-nodejs/src/manifest.json#L41-L49)]

    [!code-json[Manifest file](~/../_msteams-samples-hello-world-nodejs/src/manifest.json#L50-L67)]

    You will learn more about Bots later in this guide.

    ## Step 2: Change the URLs in the manifest

    Change the URLs that point to `yourteamsapp.ngrok.io` to the URLs where the app is hosted. Microsoft Teams will load your app from this location.

    [!code-json[Manifest file](~/../_msteams-samples-hello-world-nodejs/src/manifest.json#L26-L40)]

- title: Upload the app
  durationInMinutes: 2
  content: |

    Once you update the manifest, you can rebuild the sample. 

    ## Building your app for C#

    Using `Build Solution` command from the `Build` menu will generate a file `helloworldapp.zip` in the `bin` directory within the root of the project directory `Microsoft.Teams.Samples.HelloWorld.Web`.

    > [!NOTE]
    > You need to make sure the app is running while you upload it into Teams and use it.

    ## Building your app for Node.js

    Run the following command in the app terminal window, stopping the app if needed:

    ```bash
    gulp
    ```

    This will generate a file `helloworldapp.zip` in the `manifest` directory within the root of the project directory.

    > [!NOTE]
    > You might have stopped the node process in order to rebuild the app. If so, you will need to rerun the node process using the `npm start` command described in [Build and run the sample](#BuildRun).

    ## Uploading the app

    Use the **Upload a custom app** link in Teams to upload this zip file and install your app into one of the teams you own. See **Load your package into a team** in [Upload your app in Microsoft Teams](~/concepts/apps/apps-upload) for more information on how to do this.


- title: Configure the app tab
  durationInMinutes: 2
  content: |

    Once you install the app into a team, you will need to configure it to show content. Go to a channel in the team and click on the **'+'** button to add a new tab. You can then choose `Hello World` from the **Add a tab** list.  You will then be presented with a configuration dialog. This dialog will let you choose which tab to display in this channel. Once you select the tab and click on `Save` then you can see the `Hello World` tab loaded with the tab you chose.

    <img width="530px" src="~/assets/images/samples-hello-world-tab-configure.png" title="Screenshot of configure" />

- title: Configure the app tab
  durationInMinutes: 2
  content: |

    The sample already comes with a bot. The bot is defined in the manifest and looks like this:

    [!code-json[Manifest file](~/../_msteams-samples-hello-world-csharp/Microsoft.Teams.Samples.HelloWorld.Web/Manifest/manifest.json#L45-L55)]

    You need a bot definition for each bot contained in your app. In this case you already have a bot and have given it a registered **bot ID**, so all you will do is add credentials for the bot and test it.

    ## Add credentials for the bot
    In the `Microsoft.Teams.Samples.HelloWorld.Web` project you will find a config file called `Web.config`. This file contains the following code:

    [!code-xml[Web.config file](~/../_msteams-samples-hello-world-csharp/Microsoft.Teams.Samples.HelloWorld.Web/Web.config#L7-L14)]

    Earlier you made note of the **APP ID** from the bot framework as well as a password. Use those vales for "MicrosoftAppId" and "MicrosoftAppPassword" in the `Web.config` file. This is not a particularly safe location to store credentials, but it will work for this example.

    After these values are changed the app must be rebuilt using `Build Solution` command, and should be started again using `Start Debugging` from the `Debug` menu. Reload the app using the newly built zip file in Microsoft Teams.

    > [!NOTE]
    > Do NOT stop your ngrok session or you will have to update all the ngrok urls associated with your app.

    ## Test the bot with the bot emulator

    Before you run the bot in Teams, confirm that the bot works as expected  using the [Bot Framework Emulator](/bot-framework/debug-bots-emulator?toc=/microsoftteams/platform/toc.json&bc=/microsoftteams/platform/breadcrumb/toc.json), a desktop application that allows bot developers to test and debug their bots.

    Once you have the emulator running, you will need three things to set up a connection:

    * The endpoint URL, which is the address where your bot is exposed.  It can be the local address 'http://localhost:3333/api/messages', or an external address using the ngrok tunnel you set up earlier like `https://d0ac14a5.ngrok.io/api/messages`.
    * The Microsoft App ID, which is the **ID** you used earlier.
    * The Microsoft App Password from the Bot Framework which you made a note of earlier.

    > [!TIP]
    > To verify your bot is working, just verify that it is echoing back whatever you say to it.

    If the bot is not working, check to see if your app is running, and check ngrok if you are using it.

    ## Test your bot in Teams

    You can now interact with the bot in Teams. Choose a channel in the team where you registered your app, and type `@your-bot-name`. This is called an **@mention**. Whatever message you send to the bot will be sent back to you as a reply.

    <img width="450px" title="Bot responses" src="~/assets/images/samples-hello-world-bot.png" />

- title: Compose rich messages
  durationInMinutes: 2
  content: |

    The Microsoft Teams developer platform allows users to compose custom rich messages in their conversations through a feature called **Messaging Extensions**. Messaging extensions are used when you want to insert smart content into conversations, typically triggered by a search like action. For example you can use messaging extensions to insert a specific work item with its summary details such as title, assigned to, due dates, and links to access it directly on your planning application while starting a conversation about it. Messaging extensions are built over bots through special APIs and commands. Once you have a bot in the app, it is very easy to extend the bot to also handle **messaging extensions**.

    ## Update the app manifest and reload the app in teams again

    The `Hello World` sample comes with a built in messaging extension, which looks something like this:

    [!code-json[Manifest file](~/../_msteams-samples-hello-world-csharp/Microsoft.Teams.Samples.HelloWorld.Web/Manifest/manifest.json#L56-L79)]

    You have already updated the botId used by the compose extension so there is no need to do that again.

    ## Test your messaging extension

    To test your messaging extension, you can click on the three dots below the input box in your conversation view. A menu will pop up with the **'Hello World'** app in it. When you click it, you will see a bunch of random texts showing up. You can choose any one of them and it will be inserted it into your conversation.

    <img width="530px" title="Messaging extension menu" src="~/assets/images/samples-hello-world-messaging-extensions-menu.png" />

    <img width="530px" title="Messaging extension result" src="~/assets/images/samples-hello-world-messaging-extensions-result.png" />

    <img width="530px" title="Messaging extension send" src="~/assets/images/samples-hello-world-messaging-extensions-send.png" />